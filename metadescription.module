<?php

/**
 * Implementation of hook_init().
 */
function metadescription_init() {
  $description = metadescription_get_description();
  if($description) {
    drupal_set_html_head('<meta name="Description" content="' . $description . '">');
  }
}

/**
 * Get description for the current uri.
 */
function metadescription_get_description() {
  $uri = request_uri();

  // Search for exact match
  $desc = db_result(db_query("SELECT description FROM {metadescription} WHERE uri = '%s'", array(':uri' => $uri)));
  // If there's no exact match we search for patterns or fallbacks
  if(!$desc) {
    $search_pattern = TRUE;
    $search_fallback = TRUE;

    // Search for patterns
    $uri_parts = metadescription_get_uri_parts($uri);
    $position = count($uri_parts) - 1;
    while($search_pattern && $position > 0) {
      $uri_parts[$position] = '%';
      $uri = metadescription_build_uri($uri_parts);
      $desc = db_result(db_query("SELECT description FROM {metadescription} WHERE uri = '%s'", array(':uri' => $uri)));
      if($desc) {
        $search_pattern = $search_fallback = FALSE;
      }
      $position -= 1;
    }

    // Search for fallback
    $uri_parts = metadescription_get_uri_parts($uri);
    while($search_fallback && count($uri_parts) > 0) {
      unset($uri_parts[count($uri_parts) - 1]);
      $uri = metadescription_build_uri($uri_parts);
      $uri .= '/*';
      $desc = db_result(db_query("SELECT description FROM {metadescription} WHERE uri = '%s'", array(':uri' => $uri)));
      if($desc) {
        $search_fallback = FALSE;
      }
    }
  }

  // Nothing found
  if(!$desc) {
    return FALSE;
  }

  // Get the placeholder values from description
  $values = array();
  $start = 0;
  while($pos = strpos($desc, '[', $start)) {
    $pos += 1;
    $end = strpos($desc, ']', $start);
    $value = substr($desc, $pos, $end - $pos);
    $values[] = $value;
    $start = $end + 1;
  }
  
  // Get pathauto path with the values we want to use in the meta description (we don't want node/nid)
  $uri = urldecode(request_uri());
  $pathauto_values = explode('/', trim(drupal_get_path_alias($uri), '/'));
  foreach($values as $value) {
    $value = urldecode($value);
    $placeholder = '[' . $value . ']';
    if($pathauto_values[$value]) {
      $desc = str_replace($placeholder, $pathauto_values[$value], $desc);
    } else {
      $desc = str_replace($placeholder, NULL, $desc);
    }
  }
error_log(var_export($desc, TRUE));
  return $desc;
}

/**
 * Get the uri as an array.
 */
function metadescription_get_uri_parts($uri) {
  $uri_parts = explode('/', trim($uri, '/'));
  return $uri_parts;
}

/**
 * Rebuild uri.
 */
function metadescription_build_uri($uri_parts) {
  $uri = '';
  foreach($uri_parts as $part) {
    $uri .= '/' . $part;
  }
  return $uri;
}

/**
 * Implementation of hook_menu().
 */
function metadescription_menu() {
  $items = array();
  $items['admin/settings/metadescription'] = array(
    'title' => 'Meta Description',
    'page callback' => 'metadescription_settings_page',
    'access arguments' => array('administer content types'),
    'file' => 'metadescription.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}